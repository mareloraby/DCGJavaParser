Completeness (Grammatical sentences that should be accepted and the expected output for each is a parse tree):
s(T,[c,o,u,n,t,e,r,1,=,c,o,u,n,t,e,r,1,+,'(',x,/,y,-,21,')','%',_,w,2,;], []).
s(T,[while, '(', c,0, <=, w, -, 1,')', c,0, =, c,0, +, x, +, 5, ;],[]).
s(T, [c,t,r,1,3, =, '(', x, +, 3, ')', -, y, *, '(', 3, +, c,t,r,1,3, ')', ;], []).
s(T, [if, '(', c, o, u, n, t, e, r, >, w, +, 2, ')', if, '(', c, o, u, n, t, e, r, >, x, ')', c, o, u, n, t, e, r, =, y, ;, else, if, '(', c, o, u, n, t, e, r, >, y, ')', c, o, u, n, t, e, r, =, x, ;, w,=, y, /, x,;], []).
s(T, [x,=,10,;, if,'(',x,'%',2,==,0,')',x,=,x,'/',2,;,else, x,=,3,*,x,+,1,;], []).
s(T,[c,o,u,n,t,e,r, =, x, +, y,;, while, '(', c,o,u,n,t,e,r, <=, w, -, 1,')', while, '(', c,o,u,n,t,e,r, '!=', y, ')', c,o,u,n,t,e,r, =, c,o,u,n,t,e,r, +, x, +, 5, ;],[]).
s(T,[r, u, n,=,0,;,while,'(',r, u, n, <=, w, -, 1, ')', r, u, n, =, 2, *, r, u, n, +, 1, ;],[]).
s(T, [if, '(' , 'C', o, m, p, i, l, e, r, >, o, t, h, e, r, s, ')', a, l, l, =, 1, ;], []).
s(T, [while,'(',r, u, n, <=, w, -, 1, ')', r, u, n, =, 2, *, r, u, n, +, 1, ;], []).
s(T,[if, '(', 'T', o, t, a, l, <, 500, ')', 'T', o, t, a, l, =, 'T', o, t, a, l, +, 150, ;, else, if, '(', x, '!=', 'T', o, t, a, l, ')', 'T', o, t, a, l, =, 0, ;, else, x, =, 55, /, y, -, 15, ;],[]).
s(T,[$,p,a,r,a,m, =, 50,;, 'if', '(', '_',w,'_',f,r,e,e,z, ==, 0, ')',while, '(', $,p,a,r,a,m, >, 0, ')',$,p,a,r,a,m, =, $,p,a,r,a,m, -, 1,;],[]).
s(T,[$,p,a,r,a,m, =, 50,;, 'if', '(', '_',w,'_',f,r,e,e,z, ==, 0, ')', while, '(', $,p,a,r,a,m, >, 0, ')',$,p,a,r,a,m, =, $,p,a,r,a,m, -, 1,;, else, if,'(', '_',w,'_',f,r,e,e,z, ==, 1,')',$,p,a,r,a,m, =, 0,; ],[]).
s(T,[$,p,a,r,a,m, =, 50,;, 'if', '(', '_',w,'_',f,r,e,e,z, ==, 0, ')', while, '(', $,p,a,r,a,m, >, 0, ')',$,p,a,r,a,m, =, $,p,a,r,a,m, -, 1,;, else, if,'(', '_',w,'_',f,r,e,e,z, ==, 1,')',$,p,a,r,a,m, =, 1,;, else, $,p,a,r,a,m, =, 0, ;  ],[]).